{
    "$id": "https://example.org/bindless/Spec.schema.json",
    "x-oxygen-schema-version": "1.0.0",
    "title": "BindingSlots",
    "description": "JSON Schema for the BindingSlots YAML used by BindlessCodeGen",
    "type": "object",
    "required": [
        "meta",
        "defaults",
        "domains",
        "root_signature"
    ],
    "properties": {
        "meta": {
            "type": "object",
            "description": "Metadata for this spec.",
            "properties": {
                "version": {
                    "type": "string",
                    "pattern": "^\\d+\\.\\d+\\.\\d+$",
                    "description": "Semantic version (major.minor.patch) of the binding slots specification."
                },
                "description": {
                    "type": "string"
                }
            },
            "required": ["version"],
            "additionalProperties": true
        },
        "defaults": {
            "type": "object",
            "description": "Default constants used by the generator.",
            "properties": {
                "invalid_index": {
                    "type": "integer",
                    "minimum": 0
                }
            },
            "required": [
                "invalid_index"
            ],
            "additionalProperties": true
        },
        "domains": {
            "type": "array",
            "description": "List of domain definitions. Each domain defines a contiguous range (domain_base..domain_base+capacity-1) for a resource kind.",
            "items": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "domain_base",
                    "capacity",
                    "kind"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
                    },
                    "name": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string",
                        "enum": [
                            "SRV",
                            "CBV",
                            "SAMPLER",
                            "UAV"
                        ]
                    },
                    "register": {
                        "type": "string",
                        "pattern": "^[tbsu]\\d+$",
                        "description": "Register token (e.g. 't0','b1','s0','u0')"
                    },
                    "space": {
                        "type": "string",
                        "pattern": "^space\\d+$",
                        "description": "Register space token (e.g. 'space0','space1')"
                    },
                    "heap_index": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "uav_counter_register": {
                        "type": "string",
                        "pattern": "^u\\d+$",
                        "description": "Optional UAV counter register token (e.g. 'u0') for UAV domains that expose a separate counter resource. Only valid for kind == UAV."
                    },
                    "root_table": {
                        "type": "string",
                        "description": "Optional name of a root_signature parameter (descriptor_table) that this domain is placed in."
                    },
                    "domain_base": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "capacity": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "comment": {
                        "type": "string"
                    }
                },
                "additionalProperties": false,
                "allOf": [
                    {
                        "if": {
                            "properties": { "kind": { "enum": ["SRV","UAV","SAMPLER"] } },
                            "required": ["kind"]
                        },
                        "then": {
                            "required": ["register","space","root_table"]
                        }
                    }
                ]
            }
        },
        "symbols": {
            "type": "object",
            "description": "Optional named symbols; values may reference defaults or be explicit values.",
            "additionalProperties": {
                "type": "object",
                "properties": {
                    "domain": {
                        "type": "string"
                    },
                    "value": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "comment": {
                        "type": "string"
                    }
                },
                "additionalProperties": false,
                "allOf": [
                    {
                        "if": {
                            "properties": { "type": { "const": "descriptor_table" } },
                            "required": ["type"]
                        },
                        "then": {
                            "oneOf": [
                                {
                                    "properties": {
                                        "domains": {
                                            "oneOf": [
                                                { "type": "string" },
                                                { "type": "array", "items": { "type": "string" } }
                                            ]
                                        }
                                    },
                                    "required": ["domains"]
                                },
                                {
                                    "properties": {
                                        "ranges": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "required": ["domain"]
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        }
        ,
        "root_signature": {
            "type": "array",
            "description": "Ordered list of root signature parameters. Each entry describes a parameter and its ranges or root descriptors.",
            "items": {
                "type": "object",
                "required": ["type","name","index","visibility"],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": ["descriptor_table", "cbv", "root_constants", "root_descriptor"]
                    },
                    "name": {
                        "type": "string",
                        "description": "Optional human-friendly name for the parameter"
                    },
                    "ranges": {
                        "type": "array",
                        "description": "For descriptor_table: list of ranges (SRV/CBV/UAV/SAMPLER)",
                        "items": {
                            "type": "object",
                            "required": ["range_type","domain","base_shader_register","register_space","num_descriptors"],
                            "properties": {
                                "range_type": {
                                    "type": "string",
                                    "enum": ["SRV","CBV","UAV","SAMPLER"]
                                },
                                "domain": {
                                    "oneOf": [
                                        { "type": "string" },
                                        { "type": "array", "items": { "type": "string" } }
                                    ],
                                    "description": "Domain id or array of domain ids this range is backed by (e.g. ['materials','textures'])."
                                },
                                "base_shader_register": {
                                    "type": "string",
                                    "pattern": "^[tbsu]\\d+$",
                                    "description": "Register token for base shader register (e.g. 't0')"
                                },
                                "register_space": {
                                    "type": "string",
                                    "pattern": "^space\\d+$",
                                    "description": "Register space token (e.g. 'space0')"
                                },

                                "num_descriptors": {
                                    "anyOf": [
                                        {"type": "integer","minimum": 1},
                                        {"type": "string","enum": ["unbounded"]}
                                    ],
                                    "description": "Number of descriptors in the range, or 'unbounded' for append/heap-size semantics"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "shader_register": {
                        "type": "string",
                        "pattern": "^[tb]\\d+$",
                        "description": "Register token for CBV/root_descriptor/root_constants (e.g. 'b1')"
                    },
                    "register_space": {
                        "type": "string",
                        "pattern": "^space\\d+$"
                    },
                    "visibility": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": ["ALL","VERTEX","HULL","DOMAIN","GEOMETRY","PIXEL","VS","HS","DS","GS","PS"]
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": ["ALL","VERTEX","HULL","DOMAIN","GEOMETRY","PIXEL","VS","HS","DS","GS","PS"]
                                }
                            }
                        ],
                        "description": "Shader-stage visibility; matches D3D12_SHADER_VISIBILITY full names or common short aliases. Required for D3D12 root parameters."
                    },
                    "index": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "Explicit root parameter index. Parameter order is not used when this is present."
                    },
                    "num_32bit_values": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "For root_constants: number of 32-bit values"
                    },
                    "cbv_array_size": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "If type == cbv and this field is present, defines an array root descriptor"
                    }
                },
                "additionalProperties": false,
                "allOf": [
                    {
                        "if": {
                            "properties": { "type": { "const": "descriptor_table" } },
                            "required": ["type"]
                        },
                        "then": {
                            "oneOf": [
                                {
                                    "properties": {
                                        "domains": {
                                            "oneOf": [
                                                { "type": "string" },
                                                { "type": "array", "items": { "type": "string" } }
                                            ]
                                        }
                                    },
                                    "required": ["domains"]
                                },
                                {
                                    "properties": {
                                        "ranges": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "required": ["domain"]
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
    "heaps": {
        "type": "array",
        "description": "Optional heap allocation strategy SSoT. Defines named heaps and their capacities, base indices and policies. Global bindless indices are derived per-heap from [base_index, base_index + capacity). These ranges MUST NOT overlap across any heaps. Gaps are allowed (no requirement for adjacency). The runtime JSON uses a unified 'capacity' per heap; visibility is implied by the heap key suffix (:cpu or :gpu).",
            "items": {
                "type": "object",
                "required": [
                    "id",
                    "type",
                    "shader_visible",
            "capacity",
                    "base_index",
                    "allow_growth"
                ],
                "properties": {
                    "id": { "type": "string" },
                    "type": { "type": "string", "enum": ["CBV_SRV_UAV","SAMPLER","RTV","DSV","Other"] },
                    "shader_visible": { "type": "boolean" },
            "capacity": { "type": "integer", "minimum": 1 },
                    "base_index": { "type": "integer", "minimum": 0 },
                    "allow_growth": { "type": "boolean" },
                    "growth_factor": { "type": "number", "exclusiveMinimum": 1.0 },
                    "max_growth_iterations": { "type": "integer", "minimum": 0 },
                    "debug_name": { "type": "string" }
                },
                "additionalProperties": false
            }
        },
        "mappings": {
            "type": "array",
            "description": "Maps domains to a named heap and a local base index.",
            "items": {
                "type": "object",
                "required": ["domain","heap","local_base"],
                "properties": {
                    "domain": { "type": "string" },
                    "heap": { "type": "string" },
                    "local_base": { "type": "integer", "minimum": 0 }
                },
                "additionalProperties": false
            }
        }
    },
    "additionalProperties": false,
    "examples": [
        {
            "meta": {
                "version": "1.0.0",
                "description": "Authoritative bindless slot/register mapping for Oxygen.",
                "source": "src/Oxygen/Core/Bindless/Spec.yaml"
            },
            "defaults": {
                "invalid_index": 4294967295
            },
            "domains": [
                {
                    "id": "textures",
                    "name": "Textures",
                    "kind": "SRV",
                    "register": "t0",
                    "space": "space0",
                    "domain_base": 5096,
                    "capacity": 65536,
                    "comment": "Texture SRV array"
                }
            ],
            "symbols": {
                "kInvalidBindlessIndex": {
                    "value": "invalid_index",
                    "comment": "invalid sentinel"
                }
            }
            ,
            "psos": {
                "MyDefaultPSO": {
                    "domains": ["textures", "materials"],
                    "comment": "Example PSO that uses texture and material domains"
                }
            }
        }
    ]
}
