# The binary layout of a `.pak` file is as follows:
#
# ```text
# [ PakHeader ]
# [ Textures (Data Blobs) ]
#     [ Texture 0 Data (aligned)]
#     [ Texture 1 Data (aligned)]
#     ...
# [ Buffers (Data Blobs) ]
#     [ Buffer 0 Data (aligned)]
#     [ Buffer 1 Data (aligned)]
#     ...
# [ Audio Blobs (Data Blobs) ]
#     [ Audio Blob 0 Data (aligned)]
#     ...
#
# ... Other data blob types (excluding shaders)
#
# [ Global Resource Tables ]
#     [ TextureTable[] ]
#         [ TextureTableEntry 0 ]
#         [ TextureTableEntry 1 ]
#         ...
#     [ BufferTable[] ]
#         [ BufferTableEntry 0 ]
#         [ BufferTableEntry 1 ]
#         ...
#     [ AudioTable[] ]
#         [ AudioTableEntry 0 ]
#         ...
# [ Asset Descriptors ]
#     [ Asset 0 Descriptor (e.g. GeometryAsset, MaterialAsset, ...) ]
#     [ Asset 1 Descriptor ]
#     ...
#     [ Asset N-1 Descriptor (aligned) ]
# [ AssetDirectory[] ]
#     [ AssetDirectoryEntry 0 ]
#     [ AssetDirectoryEntry 1 ]
#     ...
#     [ AssetDirectoryEntry N-1 ]
# [ PakFooter ]
# ```

version: 1
content_version: 1

# Buffer resources emitted as:
#  - data in the buffers data region
#  - descriptors in the buffers table, emitted as:
#       #pragma pack(push, 1)
#       struct BufferResourceDesc {
#         OffsetT data_offset = 0; //!< Absolute offset to buffer data in the pak
#         DataBlobSizeT size_bytes = 0; //!< Size of buffer data in bytes
#         uint32_t usage_flags = 0; //!< Usage hints (see above)
#         uint32_t element_stride = 0; //!< 1 for raw buffers, 0 when unused
#         uint8_t element_format = 0; //!< Format enum value (0 = raw or structured)
#         uint8_t reserved[11] = {}; //!< Reserved for future use (must be zero)
#       };
#       #pragma pack(pop)
#       static_assert(sizeof(BufferResourceDesc) == 32);
buffers:
  - name: "VertexBuffer"
    usage_flags: 1         # 0x01 VertexBuffer
    element_stride: 12     # e.g., 3 floats per vertex
    element_format: 0      # 0 = raw/structured
    data_hex: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"  # 32 bytes hex, example only

  - name: "IndexBuffer"
    usage_flags: 2         # 0x02 IndexBuffer
    element_stride: 4      # e.g., 4 bytes per index (uint32)
    element_format: 0      # 0 = raw/structured
    data_hex: "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"  # 32 bytes hex, example only

# Texture resources emitted as:
#  - data in the textures data region
#  - descriptors in the textures table, emitted as:
#       #pragma pack(push, 1)
#       struct TextureResourceDesc {
#         OffsetT data_offset; // Absolute offset to texture data
#         DataBlobSizeT data_size; // Size of texture data
#         uint8_t texture_type; // 2D, 3D, Cube, etc. (enum)
#         uint8_t compression_type; // Compression type (e.g., BC1, BC3, etc.)
#         uint32_t width; // Texture width
#         uint32_t height; // Texture height
#         uint16_t depth; // For 3D textures (volume), otherwise 1
#         uint16_t array_layers; // For array textures/cubemap arrays, otherwise 1
#         uint16_t mip_levels; // Number of mip levels
#         uint8_t format; // Texture format enum
#         uint16_t alignment; // 256 for textures
#         // Reserved for future use
#         uint8_t reserved[9] = {};
#       };
#       #pragma pack(pop)
#       static_assert(sizeof(TextureResourceDesc) == 40);
textures:
  - name: "DiffuseTex"
    texture_type: 0         # 0 = 2D
    compression_type: 0     # 0 = uncompressed
    width: 256
    height: 256
    depth: 1
    array_layers: 1
    mip_levels: 1
    format: 0               # 0 = unknown/RAW, set as needed
    alignment: 256
    data_hex: "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021222324252627"  # 40 bytes hex, example only

# Emit AssetHeader as:
# #pragma pack(push, 1)
# struct AssetHeader {
#   uint8_t asset_type = 0; // Redundant with directory for debugging
#   char name[kMaxNameSize] = {}; // Asset name for debugging/tools (64 bytes)
#   uint8_t version = 0; // Asset format version (up to 256 versions)
#   uint8_t streaming_priority = 0; // Loading priority: 0=highest, 255=lowest
#   uint64_t content_hash = 0; // Content integrity hash
#   uint32_t variant_flags = 0; // Project-defined (not interpreted by engine)
#   // Reserved for future use
#   uint8_t reserved[16] = {};
# };
# #pragma pack(pop)
# static_assert(sizeof(AssetHeader) == 95);
assets:
  # Emit Material Asset as:
  # #pragma pack(push, 1)
  # struct MaterialAssetDesc {
  #   AssetHeader header;
  #   uint8_t material_domain; // e.g. Opaque, AlphaBlended
  #   uint32_t flags; // Bitfield for double-sided, alpha test, etc.
  #   uint32_t shader_stages; // Bitfield for shaders used for this material

  #   // --- Scalar factors (PBR) ---
  #   float base_color[4] = { 1.0f, 1.0f, 1.0f, 1.0f }; // RGBA fallback
  #   float normal_scale = 1.0f;
  #   float metalness = 0.0f;
  #   float roughness = 1.0f;
  #   float ambient_occlusion = 1.0f;

  #   // --- Core texture references (Index into TextureResourceTable,
  #   // kNoResourceIndex = invalid/none) ---
  #   ResourceIndexT base_color_texture = kNoResourceIndex;
  #   ResourceIndexT normal_texture = kNoResourceIndex;
  #   ResourceIndexT metallic_texture = kNoResourceIndex;
  #   ResourceIndexT roughness_texture = kNoResourceIndex;
  #   ResourceIndexT ambient_occlusion_texture = kNoResourceIndex;

  #   static_assert(kNoResourceIndex == 0);
  #   ResourceIndexT reserved_textures[8] = {};

  #   uint8_t reserved[68] = {};
  # };
  # // Followed by:
  # // - array of shader references:
  # //   ShaderReference[count_of(set bits in shader_stages)]
  # #pragma pack(pop)
  # static_assert(sizeof(MaterialAssetDesc) == 256);
  #
  # Emit ShaderReference as:
  # #pragma pack(push, 1)
  # struct ShaderReferenceDesc {
  #   char shader_unique_id[192] = {}; // Shader unique identifier
  #   uint64_t shader_hash = 0; // Hash of source for validation

  #   // Reserved for future use
  #   uint8_t reserved[16] = {};
  # };
  # #pragma pack(pop)
  # static_assert(sizeof(ShaderReferenceDesc) == 216);
  - name: "TestMaterial"
    asset_key: "01234567-89ab-cdef-0123-456789abcdef"
    type: material
    variant: 0
    version: 1
    alignment: 256
    texture_refs:
      base_color_texture: "DiffuseTex"
    base_color: [1.0, 1.0, 1.0, 1.0]
    normal_scale: 1.0
    metalness: 0.0
    roughness: 1.0
    ambient_occlusion: 1.0
    flags: 0
    shader_stages: 0x3  # e.g., 0x3 for Vertex + Pixel shaders
    shader_references:
      - shader_unique_id: "VS@Test/Shader.hlsl"
        shader_hash: 0x1234567890abcdef
      - shader_unique_id: "PS@Test/Shader.hlsl"
        shader_hash: 0xfedcba0987654321

  # Emit Geometry Asset as:
  # #pragma pack(push, 1)
  # struct GeometryAssetDesc {
  #   AssetHeader header;
  #   uint32_t lod_count = 0; // Number of LODs (must be >= 1)
  #   float bounding_box_min[3] = {}; // AABB min coordinates
  #   float bounding_box_max[3] = {}; // AABB max coordinates

  #   // Reserved for future use
  #   uint8_t reserved[133] = {};
  # };
  # // Followed by: MeshDesc meshes[lod_count];
  # #pragma pack(pop)
  # static_assert(sizeof(GeometryAssetDesc) == 256);
  - name: "TestGeometry"
    asset_key: "fedcba98-7654-3210-fedc-ba9876543210"
    type: geometry
    version: 1
    streaming_priority: 0
    content_hash: 0
    variant_flags: 0
    alignment: 256
    lods:
      # Emit as:
      # #pragma pack(push, 1)
      # struct MeshDesc {
      #   char name[kMaxNameSize] = {};
      #   ResourceIndexT vertex_buffer = kNoResourceIndex; // Reference to vertex buffer
      #   ResourceIndexT index_buffer = kNoResourceIndex; // Reference to index buffer
      #   uint32_t submesh_count = 0; // Number of SubMeshes
      #   uint32_t mesh_view_count = 0; // Total number of MeshViews (all SubMeshes)
      #   float bounding_box_min[3] = {}; // AABB min coordinates
      #   float bounding_box_max[3] = {}; // AABB max coordinates
      # };
      # // Followed by: SubMeshDesc submeshes[submesh_count];
      # #pragma pack(pop)
      # static_assert(sizeof(MeshDesc) == 104);
      - name: "LOD0"
        vertex_buffer: "VertexBuffer"   # Name of buffer resource (emitted as index in the buffers table)
        index_buffer: "IndexBuffer"     # Name of buffer resource (emitted as index in the buffers table)
        submeshes:
          # Emit as:
          # #pragma pack(push, 1)
          # struct SubMeshDesc {
          #   char name[kMaxNameSize] = {};
          #   AssetKey material_asset_key; // AssetKey reference to MaterialAsset
          #   uint32_t mesh_view_count = 0; // Number of MeshViews in this SubMesh
          #   float bounding_box_min[3] = {}; // AABB min coordinates
          #   float bounding_box_max[3] = {}; // AABB max coordinates
          # };
          # // Followed by: MeshViewDesc mesh_views[mesh_view_count]
          # #pragma pack(pop)
          # static_assert(sizeof(SubMeshDesc) == 108);
          - name: "SubMesh0"
            material: "TestMaterial"    # Name of material asset
            mesh_views:
              # #pragma pack(push, 1)
              # struct MeshViewDesc {
              #   //! Buffer index type for mesh views (4 bytes)
              #   using BufferIndexT = DataBlobSizeT;

              #   BufferIndexT first_index = 0; // Start index in index buffer
              #   BufferIndexT index_count = 0; // Number of indices
              #   BufferIndexT first_vertex = 0; // Start vertex in vertex buffer
              #   BufferIndexT vertex_count = 0; // Number of vertices
              # };
              # #pragma pack(pop)
              # static_assert(sizeof(MeshViewDesc) == 16);
              - first_index: 0
                index_count: 3
                first_vertex: 0
                vertex_count: 3
            bounding_box_min: [0.0, 0.0, 0.0]
            bounding_box_max: [1.0, 1.0, 1.0]
        bounding_box_min: [0.0, 0.0, 0.0]
        bounding_box_max: [1.0, 1.0, 1.0]
    bounding_box_min: [0.0, 0.0, 0.0]
    bounding_box_max: [1.0, 1.0, 1.0]
