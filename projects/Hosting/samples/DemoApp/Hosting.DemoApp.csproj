<?xml version="1.0" encoding="utf-8"?>

<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <OutputType>WinExe</OutputType>
        <TargetFramework>net8.0-windows10.0.22621.0</TargetFramework>
        <WindowsSdkPackageVersion>10.0.22621.42</WindowsSdkPackageVersion>
        <TargetPlatformMinVersion>10.0.22000.0</TargetPlatformMinVersion>
        <Platforms>x64</Platforms>
        <RuntimeIdentifiers>win-x64</RuntimeIdentifiers>
        <UseWinUI>true</UseWinUI>

        <IsPackable>false</IsPackable>

        <!-- The App is Packaged, unless we're running a GitHub workflow -->
        <WindowsPackageType Condition="'$(GITHUB_ACTIONS)'=='false'">None</WindowsPackageType>

        <!-- Keep this for dotnet build CLI, although not needed for MSBuild -->
        <EnableMsixTooling>true</EnableMsixTooling>

        <AssemblyName>DroidNet.Hosting.DemoApp</AssemblyName>
        <ApplicationManifest>app.manifest</ApplicationManifest>
        <PublishProfile>win-$(Platform).pubxml</PublishProfile>
        <WindowsAppSDKSelfContained>true</WindowsAppSDKSelfContained>
        <!-- For the debug symbols package -->
        <DebugType>portable</DebugType>
        <IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>

        <RootNamespace>$(RootNameSpace).Hosting.Demo</RootNamespace>

        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>

        <!-- Use our own Main entry point so we can control the HostBuilder -->
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <DefineConstants>DISABLE_XAML_GENERATED_MAIN</DefineConstants>
        <StartupObject>$(RootNamespace).Program</StartupObject>
    </PropertyGroup>

    <!--These project properties will be included in the generated AssemblyInfo -->
    <PropertyGroup>
        <Product>DroidNet Hosting Demo</Product>
    </PropertyGroup>

    <PropertyGroup>
        <GITHUB_ACTIONS>false</GITHUB_ACTIONS>
    </PropertyGroup>

    <ItemGroup>
        <Manifest Include="$(ApplicationManifest)" />
    </ItemGroup>
    <ItemGroup>
        <None Include="Assets\**\*">
            <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        </None>
    </ItemGroup>

    <ItemGroup>
        <Content Include="appsettings.json">
          <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </Content>
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="DryIoc.dll" />
        <PackageReference Include="DryIoc.Microsoft.DependencyInjection" />
        <PackageReference Include="Serilog.Expressions" />
        <PackageReference Include="Serilog.Extensions.Logging" />
        <PackageReference Include="Serilog.Sinks.Debug" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.WindowsAppSDK" />
        <PackageReference Include="Microsoft.Windows.SDK.BuildTools" />
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="$(ProjectsRoot)\Hosting\src\Hosting.csproj" />
    </ItemGroup>

    <!-- Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging Tools extension to be
    activated for this project even if the Windows App SDK Nuget package has not yet been restored. -->
    <ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
        <ProjectCapability Include="Msix" />
    </ItemGroup>

    <!-- Defining the "HasPackageAndPublishMenuAddedByProject" property here allows the Solution Explorer "Package and
    Publish" context menu entry to be enabled for this project even if the Windows App SDK Nuget package has not yet
    been restored. -->
    <PropertyGroup Condition="'$(DisableHasPackageAndPublishMenuAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
        <HasPackageAndPublishMenu>true</HasPackageAndPublishMenu>
    </PropertyGroup>

</Project>
