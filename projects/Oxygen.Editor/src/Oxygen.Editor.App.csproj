<?xml version="1.0" encoding="utf-8"?>

<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFrameworks>net9.0-windows10.0.26100.0</TargetFrameworks>

        <RootNamespace>Oxygen.Editor</RootNamespace>
        <AssemblyName>Oxygen.Editor</AssemblyName>

        <!-- Use our own Main entry point so we can control the HostBuilder -->
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <DefineConstants>DISABLE_XAML_GENERATED_MAIN</DefineConstants>
        <StartupObject>$(RootNamespace).Program</StartupObject>

        <UserSecretsId>916e565c-62a3-4c25-9a26-3637faacd34b</UserSecretsId>
    </PropertyGroup>

    <!--These project properties will be included in the generated AssemblyInfo -->
    <PropertyGroup>
        <Product>Oxygen Editor</Product>
    </PropertyGroup>

    <PropertyGroup>
        <GITHUB_ACTIONS>false</GITHUB_ACTIONS>
    </PropertyGroup>

    <ItemGroup>
        <Manifest Include="$(ApplicationManifest)" />
    </ItemGroup>

    <!-- Workaround for the stupid intellisense in vscode not seeing the generated files for XAML -->
    <!-- Only include for design-time builds (IntelliSense), not for actual compilation -->
    <ItemGroup Condition="'$(BuildingInsideVisualStudio)' != 'True' AND '$(DesignTimeBuild)' == 'True'">
        <Compile Include="$(IntermediateOutputPath)\**\*.cs" AutoGen="True" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="DryIoc.dll" />
        <PackageReference Include="DryIoc.Microsoft.DependencyInjection" />
        <PackageReference Include="Serilog.Expressions" />
        <PackageReference Include="Serilog.Extensions.Logging" />
        <PackageReference Include="Serilog.Extensions.Hosting" />
        <PackageReference Include="Serilog.Sinks.Console" />
        <PackageReference Include="Serilog.Sinks.Debug" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="CommunityToolkit.Mvvm" />
        <PackageReference Include="CommunityToolkit.WinUI.Behaviors" />
        <PackageReference Include="Microsoft.Data.Sqlite" />
        <PackageReference Include="Microsoft.EntityFrameworkCore" />
        <PackageReference Include="Microsoft.EntityFrameworkCore.Design">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" />
        <PackageReference Include="Microsoft.EntityFrameworkCore.Tools">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Microsoft.Windows.SDK.BuildTools" />
        <PackageReference Include="Microsoft.WindowsAppSDK" />
        <PackageReference Include="Microsoft.Xaml.Behaviors.WinUI.Managed" />
        <PackageReference Include="System.Reactive" />
        <PackageReference Include="Testably.Abstractions" />
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="$(ProjectsRoot)\Aura\src\Aura.csproj" />
        <ProjectReference Include="$(ProjectsRoot)\Bootstrap\src\Bootstrap.csproj" />
        <ProjectReference Include="$(ProjectsRoot)\Config\src\Config.csproj" />
        <ProjectReference Include="$(ProjectsRoot)\Hosting\src\Hosting.csproj" />
        <ProjectReference Include="$(ProjectsRoot)\Oxygen.Editor.Data\src\Oxygen.Editor.Data.csproj" />
        <ProjectReference Include="$(ProjectsRoot)\Oxygen.Editor.ProjectBrowser\src\Oxygen.Editor.ProjectBrowser.csproj" />
        <ProjectReference Include="$(ProjectsRoot)\Oxygen.Editor.Projects\src\Oxygen.Editor.Projects.csproj" />
        <ProjectReference Include="$(ProjectsRoot)\Oxygen.Editor.Storage\src\Oxygen.Editor.Storage.csproj" />
        <ProjectReference Include="$(ProjectsRoot)\Oxygen.Editor.WorldEditor\src\Oxygen.Editor.WorldEditor.csproj" />
        <ProjectReference Include="$(ProjectsRoot)\Routing\Routing.WinUI\src\Routing.WinUI.csproj" />

        <!-- Rererence the attributes project "treat as an analyzer"-->
        <ProjectReference Include="$(ProjectsRoot)\Mvvm.Generators\src\Mvvm.Generators.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" />
        <ProjectReference Include="$(ProjectsRoot)\Mvvm.Generators.Attributes\src\Mvvm.Generators.Attributes.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="true" />

        <!-- Rererence the attributes project "treat as an analyzer"-->
    </ItemGroup>


    <ItemGroup>
        <None Update="appsettings.json">
            <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        </None>
    </ItemGroup>

    <!-- Copy assets from `ProjectBrowser` project-->
    <!--
    <ItemGroup>
        <Content Include="..\ProjectBrowser\Assets\**">
            <Link>Assets\%(RecursiveDir)%(Filename)%(Extension)</Link>
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </Content>
    </ItemGroup>
    -->

    <!-- Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging Tools extension to be
    activated for this project even if the Windows App SDK Nuget package has not yet been restored. -->
    <ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
        <ProjectCapability Include="Msix" />
    </ItemGroup>

    <!-- Defining the "HasPackageAndPublishMenuAddedByProject" property here allows the Solution Explorer "Package and
    Publish" context menu entry to be enabled for this project even if the Windows App SDK Nuget package has not yet
    been restored. -->
    <PropertyGroup Condition="'$(DisableHasPackageAndPublishMenuAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
        <HasPackageAndPublishMenu>true</HasPackageAndPublishMenu>
    </PropertyGroup>

</Project>
